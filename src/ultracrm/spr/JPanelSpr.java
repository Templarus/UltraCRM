/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ultracrm.spr;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import javax.swing.JComboBox;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import ultracrm.DatabaseTableModel;
import ultracrm.FilterXML;
import ultracrm.Start;

/**
 *
 * @author Asus
 */
public class JPanelSpr extends javax.swing.JPanel {

    private double scalingfactor = 1.0;
    private DatabaseTableModel dbm = new DatabaseTableModel(false);

    /**
     * Creates new form JPanelKontr
     */
    public JPanelSpr() {

        initComponents();
      
        rescaling();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();

        fileChooser.setDialogTitle("Выбор файла для импорта");
        fileChooser.setFileFilter(new FilterXML());

        setMaximumSize(new java.awt.Dimension(1920, 1280));
        setName(""); // NOI18N
        setLayout(null);

        jButton1.setText("Условия оплаты");
        add(jButton1);
        jButton1.setBounds(0, 10, 200, 80);
    }// </editor-fold>//GEN-END:initComponents
    private void rescaling() //method used to rescale UI
    {
        scalingfactor = Start.interfaceScalingFactor;


        int width = (int) (getPreferredSize().width * scalingfactor);
        int height = (int) (getPreferredSize().height * scalingfactor);

        setPreferredSize(new Dimension((int) (getPreferredSize().width * scalingfactor), (int) (getPreferredSize().height * scalingfactor)));
        setBounds(0, 0, (int) (1680 * scalingfactor), (int) (1050 * scalingfactor));
        for (Component comp : this.getComponents()) {
            comp.setPreferredSize(new Dimension((int) (comp.getPreferredSize().width * scalingfactor), (int) (comp.getPreferredSize().height * scalingfactor)));
            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));

            //comp=rescaleComponent(comp);
            rescaleComponent(comp);

            if (comp instanceof JMenuBar) {
                JMenuBar jM = (JMenuBar) comp;
                for (Component lComp : jM.getComponents()) {
                    rescaleComponent(lComp);
                }
            }
            if (comp instanceof JPanel) {
                JPanel jP = (JPanel) comp;
                for (Component lComp : jP.getComponents()) {
                    rescaleComponent(lComp);
                }
            }
            if (comp instanceof JScrollPane) {
                JScrollPane jSp = (JScrollPane) comp;
                for (Component lComp : jSp.getComponents()) {
                    rescaleComponent(lComp);
                }
            }
        }
        repaint();
        revalidate();
    }

    private Component rescaleComponent(Component comp) {
        if (comp instanceof JComboBox) {
            JComboBox jl = (JComboBox) comp;
            jl.setFont(new Font("Tahoma", Font.PLAIN, (int) (jl.getFont().getSize() * scalingfactor)));
            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));
        }
        if (comp instanceof JTable) {
            JTable jT = (JTable) comp;
            jT.setFont(new Font("Tahoma", Font.PLAIN, (int) (jT.getFont().getSize() * scalingfactor)));
            for (int i = 0; i < jT.getColumnModel().getColumnCount(); i++) {
               // System.err.println("123123123132");
               // System.out.println("widtbefore=" + jT.getColumnModel().getColumn(i).getPreferredWidth() + " AFTER=" + (int) (jT.getColumnModel().getColumn(i).getPreferredWidth() * scalingfactor));

                jT.getColumnModel().getColumn(i).setPreferredWidth((int) (jT.getColumnModel().getColumn(i).getPreferredWidth() * scalingfactor));
                jT.getColumnModel().getColumn(i).setWidth((int) (jT.getColumnModel().getColumn(i).getWidth() * scalingfactor));

                comp.repaint();
                comp.revalidate();
            }

            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));
        }

        if (comp instanceof JViewport) {
            JViewport jV = (JViewport) comp;
            for (Component lComp : jV.getComponents()) {
                //System.err.println("00001111");
               // System.err.println(lComp.toString());
                rescaleComponent(lComp);
            }
            jV.setFont(new Font("Tahoma", Font.PLAIN, (int) (jV.getFont().getSize() * scalingfactor)));
            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));
        }

        return comp;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
