/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ultracrm.treker;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import static javax.swing.ListSelectionModel.SINGLE_SELECTION;
import java.sql.Date;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import ultracrm.DatabaseTableModel;
import ultracrm.MainFrame;
import ultracrm.Start;

/**
 *
 * @author Asus
 */
public class JPanelTreker extends javax.swing.JPanel {

    private double scalingfactor = 1.0;
    private DatabaseTableModel dbm = new DatabaseTableModel(false);
    private DatabaseTableModel dbmDeviceTimeWork = new DatabaseTableModel(false);
    private DatabaseTableModel dbmDeviceTimeWorkExtend = new DatabaseTableModel(false);

    /**
     * Creates new form JPanelTreker
     */
    public JPanelTreker() {
        initComponents();
        
        try {
            dbm.setDataSource(MainFrame.sDb.getSTreker());
        } catch (Exception ex) {
            System.out.println("Создание таблицы перенаправленные ошибка доступа к RS" + ex);
        }
        try {
            dbmDeviceTimeWork.setDataSource(MainFrame.sDb.getDeviceTimeWork());
        } catch (Exception ex) {
            System.out.println("Создание таблицы отработано времени по дням ошибка доступа к RS" + ex);
        }
        try {
            dbmDeviceTimeWorkExtend.setDataSource(MainFrame.sDb.getDeviceTimeWorkExtend());
        } catch (Exception ex) {
            System.out.println("Создание таблицы отработано времени по дням расшифровка ошибка доступа к RS" + ex);
        }
        sTreker.setSelectionMode(SINGLE_SELECTION);
        DeviceTimeWorkForDay.setSelectionMode(SINGLE_SELECTION);

        sTreker.getColumnModel().getColumn(0).setPreferredWidth(100);
        sTreker.getColumnModel().getColumn(1).setPreferredWidth(20);
        sTreker.getColumnModel().getColumn(2).setPreferredWidth(20);

        DeviceTimeWorkForDay.getColumnModel().getColumn(0).setPreferredWidth(80);
        DeviceTimeWorkForDay.getColumnModel().getColumn(1).setPreferredWidth(40);
        DeviceTimeWorkForDay.getColumnModel().getColumn(2).setPreferredWidth(120);

        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(0).setPreferredWidth(80);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(1).setPreferredWidth(30);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(2).setPreferredWidth(100);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(3).setPreferredWidth(100);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(4).setPreferredWidth(100);
        if (sTreker.getRowCount() != 0) {
            sTreker.setRowSelectionInterval(0, 0);
        }
        if (DeviceTimeWorkForDay.getRowCount() != 0) {
            DeviceTimeWorkForDay.setRowSelectionInterval(0, 0);
        }
        rescaling();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        butAdd = new javax.swing.JButton();
        butUpdate = new javax.swing.JButton();
        butDel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        sTreker = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DeviceTimeWorkForDay = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DeviceTimeWorkForDayExtend = new javax.swing.JTable();
        butRaschet = new javax.swing.JButton();
        butGeoInfo = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createCompoundBorder());
        setMaximumSize(new java.awt.Dimension(1920, 1680));
        setPreferredSize(new java.awt.Dimension(1600, 780));
        setLayout(null);

        butAdd.setText("Добавить");
        butAdd.setMaximumSize(new java.awt.Dimension(1920, 1680));
        butAdd.setMinimumSize(null);
        butAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddActionPerformed(evt);
            }
        });
        add(butAdd);
        butAdd.setBounds(0, 0, 210, 30);

        butUpdate.setText("Редактировать");
        butUpdate.setMaximumSize(new java.awt.Dimension(1920, 1680));
        butUpdate.setMinimumSize(null);
        butUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUpdateActionPerformed(evt);
            }
        });
        add(butUpdate);
        butUpdate.setBounds(210, 0, 210, 30);

        butDel.setText("Удалить");
        butDel.setMaximumSize(new java.awt.Dimension(1920, 1680));
        butDel.setMinimumSize(null);
        butDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDelActionPerformed(evt);
            }
        });
        add(butDel);
        butDel.setBounds(420, 0, 210, 30);

        jSeparator1.setMaximumSize(new java.awt.Dimension(1920, 1680));
        add(jSeparator1);
        jSeparator1.setBounds(0, 29, 1600, 2);

        jScrollPane1.setMaximumSize(new java.awt.Dimension(1920, 1680));
        jScrollPane1.setMinimumSize(null);

        sTreker.setAutoCreateRowSorter(true);
        sTreker.setModel(dbm);
        sTreker.setToolTipText("");
        sTreker.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        sTreker.setFocusable(false);
        sTreker.setMaximumSize(new java.awt.Dimension(1920, 1680));
        sTreker.setMinimumSize(null);
        sTreker.getTableHeader().setReorderingAllowed(false);
        sTreker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sTrekerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sTreker);
        sTreker.getTableHeader().setReorderingAllowed(false);

        add(jScrollPane1);
        jScrollPane1.setBounds(0, 73, 422, 707);

        jLabel3.setText("Список трекеров");
        jLabel3.setMaximumSize(new java.awt.Dimension(1920, 1680));
        jLabel3.setMinimumSize(null);
        add(jLabel3);
        jLabel3.setBounds(0, 37, 323, 30);

        jLabel4.setText("Расшифровка работы трекера");
        jLabel4.setMaximumSize(new java.awt.Dimension(1920, 1680));
        jLabel4.setMinimumSize(null);
        add(jLabel4);
        jLabel4.setBounds(862, 37, 277, 30);

        jLabel2.setText("Время работы по дням");
        jLabel2.setMaximumSize(new java.awt.Dimension(1920, 1680));
        jLabel2.setMinimumSize(null);
        add(jLabel2);
        jLabel2.setBounds(422, 37, 422, 30);

        jScrollPane3.setMaximumSize(new java.awt.Dimension(1920, 1680));
        jScrollPane3.setMinimumSize(null);

        DeviceTimeWorkForDay.setModel(dbmDeviceTimeWork);
        DeviceTimeWorkForDay.setMaximumSize(new java.awt.Dimension(1920, 1680));
        DeviceTimeWorkForDay.setMinimumSize(null);
        DeviceTimeWorkForDay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeviceTimeWorkForDayMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DeviceTimeWorkForDay);

        add(jScrollPane3);
        jScrollPane3.setBounds(422, 73, 422, 707);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(1920, 1680));
        jScrollPane2.setMinimumSize(null);

        DeviceTimeWorkForDayExtend.setModel(dbmDeviceTimeWorkExtend);
        DeviceTimeWorkForDayExtend.setMaximumSize(new java.awt.Dimension(1920, 1680));
        DeviceTimeWorkForDayExtend.setMinimumSize(null);
        jScrollPane2.setViewportView(DeviceTimeWorkForDayExtend);

        add(jScrollPane2);
        jScrollPane2.setBounds(850, 73, 740, 707);

        butRaschet.setText("Рассчитать данные");
        butRaschet.setToolTipText("");
        butRaschet.setMaximumSize(new java.awt.Dimension(1920, 1680));
        butRaschet.setMinimumSize(null);
        butRaschet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRaschetActionPerformed(evt);
            }
        });
        add(butRaschet);
        butRaschet.setBounds(1281, 0, 320, 30);

        butGeoInfo.setText("Гео информация");
        butGeoInfo.setMaximumSize(new java.awt.Dimension(1920, 1680));
        butGeoInfo.setMinimumSize(null);
        butGeoInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGeoInfoActionPerformed(evt);
            }
        });
        add(butGeoInfo);
        butGeoInfo.setBounds(630, 0, 210, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void butAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddActionPerformed
        AddDevice addForm = new AddDevice(Start.mf, true, "Добавление нового трекера", null);
        addForm.setVisible(true);
    }//GEN-LAST:event_butAddActionPerformed

    private void butUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butUpdateActionPerformed

    private void butDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butDelActionPerformed

    private void sTrekerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sTrekerMouseClicked
        if (evt.getClickCount() == 2) {
            Date dtFirst = new Date(-2208978000000L);
            String deviceId = (String) sTreker.getValueAt(sTreker.getSelectedRow(), 0);
            String sql = "SELECT deviceId AS Устройство, dtWork AS Дата, SUM(timeWorkin) AS [Время отработанное(мин)] FROM DeviceTimeWork GROUP BY deviceId, dtWork HAVING (deviceId = N'" + deviceId + "') ORDER BY Дата";
            try {
                dbmDeviceTimeWork.setDataSource(MainFrame.sDb.selectDb(sql));
            } catch (Exception ex) {
                System.out.println("Переход между записями в талице спр трекеров ошибка доступа к RS" + ex);
            }
            if (DeviceTimeWorkForDay.getRowCount() > 0) {
                DeviceTimeWorkForDay.setRowSelectionInterval(0, 0);
                dtFirst = (Date) DeviceTimeWorkForDay.getValueAt(DeviceTimeWorkForDay.getSelectedRow(), 1);
            }
            sql = "SELECT deviceId AS Устройство, dtWork AS Дата,CONVERT(nvarchar(8),timeBegin) as [Время начала работы], CONVERT(nvarchar(8),timeEnd) as [Время окончания работы], timeWorkin  AS [Время отработанное(мин)] FROM DeviceTimeWork WHERE deviceId = N'" + deviceId + "' AND dtWork = '" + dtFirst.toString() + "' ORDER BY timeBegin";
            try {
                dbmDeviceTimeWorkExtend.setDataSource(MainFrame.sDb.selectDb(sql));
            } catch (Exception ex) {
                System.out.println("Переход между записями в талице спр трекеров ошибка доступа к RS -обвноыление таблицы расшифровки" + ex);
            }
        }
    }//GEN-LAST:event_sTrekerMouseClicked

    private void DeviceTimeWorkForDayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeviceTimeWorkForDayMouseClicked
        if (evt.getClickCount() == 2) {
            Date dtFirst = (Date) DeviceTimeWorkForDay.getValueAt(DeviceTimeWorkForDay.getSelectedRow(), 1);
            String deviceId = (String) sTreker.getValueAt(sTreker.getSelectedRow(), 0);
            String sql = "SELECT deviceId AS Устройство, dtWork AS Дата, CONVERT(nvarchar(8),timeBegin) as [Время начала работы], CONVERT(nvarchar(8),timeEnd) as [Время окончания работы], timeWorkin  AS [Время отработанное(мин)] FROM DeviceTimeWork WHERE deviceId = N'" + deviceId + "' AND dtWork = '" + dtFirst.toString() + "' ORDER BY timeBegin";
            try {
                dbmDeviceTimeWorkExtend.setDataSource(MainFrame.sDb.selectDb(sql));
            } catch (Exception ex) {
                System.out.println("Переход между записями в талице время работы устройства ошибка доступа к RS -обвноыление таблицы расшифровки" + ex);
            }
        }
    }//GEN-LAST:event_DeviceTimeWorkForDayMouseClicked

    private void butRaschetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRaschetActionPerformed
        MainFrame.sDb.updDeviceTimeWork();
    }//GEN-LAST:event_butRaschetActionPerformed

    private void butGeoInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGeoInfoActionPerformed

        String deviceId = (String) sTreker.getValueAt(sTreker.getSelectedRow(), 0);
        ArrayList<Device> devlist = MainFrame.sDb.getDeviceList();
        for (Device d : devlist) {
            if (d.getId().equals(deviceId)) {
                CheckGeo checkGeo = new CheckGeo(Start.mf, true, "Геоинформация о трекете", d);
                checkGeo.setVisible(true);
            }
        }
    }//GEN-LAST:event_butGeoInfoActionPerformed
    private void rescaling() //method used to rescale UI
    {
        scalingfactor = Start.interfaceScalingFactor;

       // System.out.println("getPreferredSize().width=" + getPreferredSize().width);
       // System.out.println("getPreferredSize().height=" + getPreferredSize().height);

        int width = (int) (getPreferredSize().width * scalingfactor);
        int height = (int) (getPreferredSize().height * scalingfactor);
        //System.out.println("MainFrame scalingfactor=" + scalingfactor + " width=" + width + " height=" + height);

        setPreferredSize(new Dimension((int) (getPreferredSize().width * scalingfactor), (int) (getPreferredSize().height * scalingfactor)));
        setBounds(0, 0, (int) (1680 * scalingfactor), (int) (1050 * scalingfactor));
        for (Component comp : this.getComponents()) {
            comp.setPreferredSize(new Dimension((int) (comp.getPreferredSize().width * scalingfactor), (int) (comp.getPreferredSize().height * scalingfactor)));
            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));

            //comp=rescaleComponent(comp);
            rescaleComponent(comp);

            if (comp instanceof JMenuBar) {
                JMenuBar jM = (JMenuBar) comp;
                for (Component lComp : jM.getComponents()) {
                    rescaleComponent(lComp);
                }
            }
            if (comp instanceof JPanel) {
                JPanel jP = (JPanel) comp;
                for (Component lComp : jP.getComponents()) {
                    rescaleComponent(lComp);
                }
            }
            if (comp instanceof JScrollPane) {
                JScrollPane jSp = (JScrollPane) comp;
                for (Component lComp : jSp.getComponents()) {
                    rescaleComponent(lComp);
                }
            }
        }
        repaint();
        revalidate();
    }

    private Component rescaleComponent(Component comp) {
//        if (comp instanceof JButton) {
//            JButton jb = (JButton) comp;
//            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));
//            jb.setFont(new Font("Tahoma", Font.PLAIN, (int) (jb.getFont().getSize() * scalingfactor)));
//        }
//        if (comp instanceof JLabel) {
//            JLabel jl = (JLabel) comp;
//            jl.setFont(new Font("Tahoma", Font.PLAIN, (int) (jl.getFont().getSize() * scalingfactor)));
//        }
        if (comp instanceof JComboBox) {
            JComboBox jl = (JComboBox) comp;
            jl.setFont(new Font("Tahoma", Font.PLAIN, (int) (jl.getFont().getSize() * scalingfactor)));
            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));
        }
        if (comp instanceof JTable) {
            JTable jT = (JTable) comp;
            jT.setFont(new Font("Tahoma", Font.PLAIN, (int) (jT.getFont().getSize() * scalingfactor)));
            for (int i = 0; i < jT.getColumnModel().getColumnCount(); i++) {
               // System.err.println("123123123132");
               // System.out.println("widtbefore="+jT.getColumnModel().getColumn(i).getPreferredWidth()+" AFTER="+(int) (jT.getColumnModel().getColumn(i).getPreferredWidth() * scalingfactor));
                
                
                jT.getColumnModel().getColumn(i).setPreferredWidth((int) (jT.getColumnModel().getColumn(i).getPreferredWidth() * scalingfactor));
                jT.getColumnModel().getColumn(i).setWidth((int) (jT.getColumnModel().getColumn(i).getWidth() * scalingfactor));
                
                //jT.getColumnModel().getColumn(i).setPreferredWidth(5);
                //jT.getColumnModel().getColumn(i).setWidth(5);
                comp.repaint();
                comp.revalidate();
            }
            
            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));
        }
        
        
        if (comp instanceof JViewport) {
            JViewport jV = (JViewport) comp;
             for (Component lComp : jV.getComponents()) {
                    //System.err.println("00001111");
                    //System.err.println(lComp.toString());
                    rescaleComponent(lComp);
                }
            jV.setFont(new Font("Tahoma", Font.PLAIN, (int) (jV.getFont().getSize() * scalingfactor)));
            comp.setBounds((int) (comp.getX() * scalingfactor), (int) (comp.getY() * scalingfactor), (int) (comp.getWidth() * scalingfactor), (int) (comp.getHeight() * scalingfactor));
        }
        
        
        return comp;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DeviceTimeWorkForDay;
    private javax.swing.JTable DeviceTimeWorkForDayExtend;
    private javax.swing.JButton butAdd;
    private javax.swing.JButton butDel;
    private javax.swing.JButton butGeoInfo;
    private javax.swing.JButton butRaschet;
    private javax.swing.JButton butUpdate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable sTreker;
    // End of variables declaration//GEN-END:variables
}
