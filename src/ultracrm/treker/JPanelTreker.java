/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ultracrm.treker;

import static javax.swing.ListSelectionModel.SINGLE_SELECTION;
import java.sql.Date;
import ultracrm.DatabaseTableModel;
import ultracrm.MainFrame;
import ultracrm.Start;


/**
 *
 * @author Asus
 */
public class JPanelTreker extends javax.swing.JPanel {
    private DatabaseTableModel dbm = new DatabaseTableModel(false);
    private DatabaseTableModel dbmDeviceTimeWork = new DatabaseTableModel(false);
    private DatabaseTableModel dbmDeviceTimeWorkExtend = new DatabaseTableModel(false);
    /**
     * Creates new form JPanelTreker
     */
    public JPanelTreker() {
        initComponents();
      
        try {
            dbm.setDataSource(MainFrame.sDb.getSTreker());
        } catch (Exception ex) {
            System.out.println("Создание таблицы перенаправленные ошибка доступа к RS" + ex);
        }
        try {
            dbmDeviceTimeWork.setDataSource(MainFrame.sDb.getDeviceTimeWork());
        } catch (Exception ex) {
            System.out.println("Создание таблицы отработано времени по дням ошибка доступа к RS" + ex);
        }
        try {
            dbmDeviceTimeWorkExtend.setDataSource(MainFrame.sDb.getDeviceTimeWorkExtend());
        } catch (Exception ex) {
            System.out.println("Создание таблицы отработано времени по дням расшифровка ошибка доступа к RS" + ex);
        }
        sTreker.setSelectionMode(SINGLE_SELECTION);
        DeviceTimeWorkForDay.setSelectionMode(SINGLE_SELECTION);

        sTreker.getColumnModel().getColumn(0).setPreferredWidth(100);
        sTreker.getColumnModel().getColumn(1).setPreferredWidth(20);
        sTreker.getColumnModel().getColumn(2).setPreferredWidth(20);

        DeviceTimeWorkForDay.getColumnModel().getColumn(0).setPreferredWidth(80);
        DeviceTimeWorkForDay.getColumnModel().getColumn(1).setPreferredWidth(40);
        DeviceTimeWorkForDay.getColumnModel().getColumn(2).setPreferredWidth(120);

        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(0).setPreferredWidth(80);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(1).setPreferredWidth(30);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(2).setPreferredWidth(100);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(3).setPreferredWidth(100);
        DeviceTimeWorkForDayExtend.getColumnModel().getColumn(4).setPreferredWidth(100);
        if(sTreker.getRowCount() != 0){
        sTreker.setRowSelectionInterval(0, 0);
        }
        if(DeviceTimeWorkForDay.getRowCount() != 0){
        DeviceTimeWorkForDay.setRowSelectionInterval(0, 0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        butAdd = new javax.swing.JButton();
        butUpdate = new javax.swing.JButton();
        butDel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        sTreker = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DeviceTimeWorkForDay = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DeviceTimeWorkForDayExtend = new javax.swing.JTable();
        butRaschet = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1600, 780));
        setMinimumSize(new java.awt.Dimension(1600, 780));
        setPreferredSize(new java.awt.Dimension(1600, 780));

        butAdd.setText("Добавить");
        butAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddActionPerformed(evt);
            }
        });

        butUpdate.setText("Редактировать");
        butUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUpdateActionPerformed(evt);
            }
        });

        butDel.setText("Удалить");
        butDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDelActionPerformed(evt);
            }
        });

        sTreker.setAutoCreateRowSorter(true);
        sTreker.setModel(dbm);
        sTreker.setToolTipText("");
        sTreker.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        sTreker.setFocusable(false);
        sTreker.getTableHeader().setReorderingAllowed(false);
        sTreker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sTrekerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sTreker);
        sTreker.getTableHeader().setReorderingAllowed(false);

        jLabel3.setText("Список трекеров");

        jLabel4.setText("Расшифровка работы трекера");

        jLabel2.setText("Время работы по дням");

        DeviceTimeWorkForDay.setModel(dbmDeviceTimeWork);
        DeviceTimeWorkForDay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeviceTimeWorkForDayMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DeviceTimeWorkForDay);

        DeviceTimeWorkForDayExtend.setModel(dbmDeviceTimeWorkExtend);
        jScrollPane2.setViewportView(DeviceTimeWorkForDayExtend);

        butRaschet.setText("Рассчитать данные");
        butRaschet.setToolTipText("");
        butRaschet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRaschetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butDel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(butRaschet, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 99, Short.MAX_VALUE)))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butAdd)
                    .addComponent(butUpdate)
                    .addComponent(butDel)
                    .addComponent(butRaschet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void butAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddActionPerformed

        AddDevice addForm = new AddDevice(Start.mf, true, "Добавление нового трекера", null);
        addForm.setVisible(true);
    }//GEN-LAST:event_butAddActionPerformed

    private void butUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butUpdateActionPerformed

    private void butDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butDelActionPerformed

    private void sTrekerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sTrekerMouseClicked
        if (evt.getClickCount() == 2) {
            Date dtFirst = new Date(-2208978000000L);
            String deviceId = (String) sTreker.getValueAt(sTreker.getSelectedRow(), 0);
            String sql = "SELECT deviceId AS Устройство, dtWork AS Дата, SUM(timeWorkin) AS [Время отработанное(мин)] FROM DeviceTimeWork GROUP BY deviceId, dtWork HAVING (deviceId = N'" + deviceId + "') ORDER BY Дата";
            try {
                dbmDeviceTimeWork.setDataSource(MainFrame.sDb.selectDb(sql));
            } catch (Exception ex) {
                System.out.println("Переход между записями в талице спр трекеров ошибка доступа к RS" + ex);
            }
            if (DeviceTimeWorkForDay.getRowCount() > 0) {
                DeviceTimeWorkForDay.setRowSelectionInterval(0, 0);
                dtFirst = (Date) DeviceTimeWorkForDay.getValueAt(DeviceTimeWorkForDay.getSelectedRow(), 1);
            }
            sql = "SELECT deviceId AS Устройство, dtWork AS Дата,CONVERT(nvarchar(8),timeBegin) as [Время начала работы], CONVERT(nvarchar(8),timeEnd) as [Время окончания работы], timeWorkin  AS [Время отработанное(мин)] FROM DeviceTimeWork WHERE deviceId = N'" + deviceId + "' AND dtWork = '" + dtFirst.toString() + "' ORDER BY timeBegin";
            try {
                dbmDeviceTimeWorkExtend.setDataSource(MainFrame.sDb.selectDb(sql));
            } catch (Exception ex) {
                System.out.println("Переход между записями в талице спр трекеров ошибка доступа к RS -обвноыление таблицы расшифровки" + ex);
            }
        }
    }//GEN-LAST:event_sTrekerMouseClicked

    private void DeviceTimeWorkForDayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeviceTimeWorkForDayMouseClicked
        if (evt.getClickCount() == 2) {
            Date dtFirst = (Date) DeviceTimeWorkForDay.getValueAt(DeviceTimeWorkForDay.getSelectedRow(), 1);
            String deviceId = (String) sTreker.getValueAt(sTreker.getSelectedRow(), 0);
            String sql = "SELECT deviceId AS Устройство, dtWork AS Дата, CONVERT(nvarchar(8),timeBegin) as [Время начала работы], CONVERT(nvarchar(8),timeEnd) as [Время окончания работы], timeWorkin  AS [Время отработанное(мин)] FROM DeviceTimeWork WHERE deviceId = N'" + deviceId + "' AND dtWork = '" + dtFirst.toString() + "' ORDER BY timeBegin";
            try {
                dbmDeviceTimeWorkExtend.setDataSource(MainFrame.sDb.selectDb(sql));
            } catch (Exception ex) {
                System.out.println("Переход между записями в талице время работы устройства ошибка доступа к RS -обвноыление таблицы расшифровки" + ex);
            }
        }
    }//GEN-LAST:event_DeviceTimeWorkForDayMouseClicked

    private void butRaschetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRaschetActionPerformed
        MainFrame.sDb.updDeviceTimeWork();
    }//GEN-LAST:event_butRaschetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DeviceTimeWorkForDay;
    private javax.swing.JTable DeviceTimeWorkForDayExtend;
    private javax.swing.JButton butAdd;
    private javax.swing.JButton butDel;
    private javax.swing.JButton butRaschet;
    private javax.swing.JButton butUpdate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable sTreker;
    // End of variables declaration//GEN-END:variables
}
